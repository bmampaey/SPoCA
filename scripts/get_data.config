#!/usr/bin/env python2.6

# User defined routines necessary for the evaluation of the files
from datetime import datetime, timedelta
import pyfits
import re

# Return the list of desired keywords from the headers of a file
def get_keywords(fitsfile, keywords):
	result = [None]*len(keywords)
	try:
		hdulist = pyfits.open(fitsfile)
		for hdu in hdulist:
			for k,keyword in enumerate(keywords):
				if keyword in hdu.header:
					result[k] = hdu.header[keyword]
		
		hdulist.close()
	except IOError, why:
		module_logger.warning("Error reding file " + fitsfile + ": "+ str(why))
	
	return result


filename_pattern = r'(?P<date>\d+_\d+).(?P<channel>\d+)'
date_pattern = r'%Y%m%d_%H%M%S'
filename_regex = re.compile(filename_pattern)

def file_channel(filename):
	
	filename_info = filename_regex.search(filename)
	
	channel = None
	if not filename_info:
		module_logger.critical("Error parsing filename " + filename + " to extract channel")
	else:
		channel = int(filename_info.group('channel'))
	
	return channel
	
def file_date(filename):
	
	date = None
	
	filename_info = filename_regex.search(filename)
	if not filename_info:
		module_logger.critical("Error parsing filename " + filename + " to extract date")
	else:
		try:
			date = datetime.strptime(filename_info.group('date'), date_pattern)
		except ValueError:
			module_logger.debug("Error parsing filename " + filename + " to extract date")
	
	return date 





def folder_date(folder_name):
	
	# The pattern if you use smart folders, i.e. you sort your files in subfolders according to time
	# See datetime.strptime for the specification
	smart_folders_pattern = r'%Y/%m/%d/H%H00'
	smart_folders_pattern = os.path.join(data['repo'], smart_folders_pattern)
	
	date = None
	try:
		date = datetime.strptime(folder_name, smart_folders_pattern)
	except ValueError:
		module_logger.debug("Error parsing folder " + folder_name + " to extract date")
	return date


# Return True if the quality of the file is good, otherwise False
def check_file(fitsfile):
	
	[quality, exptime] = get_keywords(fitsfile, ['QUALITY', 'EXPTIME'])
	good_quality = (float(exptime) > 1.5) and (int(quality) == 0)
	return good_quality



## Parameters for the data sets
# Folder containing the data
data['repo'] = "/pool/data/aia.lev1"

# Suffix of the files
data['suffix'] = ".fits"


# Date range of the data
# Set to None if you don't want to limit
data['earliest_date'] = "2010-04-01T00:00:00"
data['latest_date'] = None # "2011-05-04T00:00:00"

# channels for the data sets
# The first channel will be used as the reference
data['channels'] = [193, 171]

# If files are more than that many second appart in a set, it will be discarded
data['max_deltatime'] = timedelta(days = 0, hours = 0, minutes = 1, seconds = 0)

# Frequency of the data sets in seconds
data['frequency'] = timedelta(days = 0, hours = 1, minutes = 0, seconds = 0)


data['folder_date'] = folder_date
data['check_folder'] = None
data['file_date'] = file_date
data['check_file'] = check_file
data['file_date'] = file_date
data['file_channel'] = file_channel
